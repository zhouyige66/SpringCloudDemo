<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>
    <!--导入配置文件-->
    <properties resource="application.yml"/>

    <!--defaultModelType="flat"设置复合主键时不单独为主键创建实体 -->
    <context id="MySql" defaultModelType="flat">
        <!--生成的POJO实现java.io.Serializable接口-->
        <plugin type="org.mybatis.generator.plugins.SerializablePlugin"/>
        <plugin type="org.mybatis.generator.plugins.ToStringPlugin"/>
        <plugin type="org.mybatis.generator.plugins.FluentBuilderMethodsPlugin"/>
        <plugin type="org.mybatis.generator.plugins.MapperAnnotationPlugin"/>
        <plugin type="org.mybatis.generator.plugins.RenameExampleClassPlugin">
            <property name="searchString" value="Example"/>
            <property name="replaceString" value="Query"/>
        </plugin>
        <!--自定义插件-->
        <plugin type="cn.roy.springcloud.base.plugin.ReplaceExampleToQueryPlugin"/>

        <!--注释-->
        <commentGenerator>
            <!--true表示不添加任何注释-->
            <property name="suppressAllComments" value="true"/>
            <!--将数据库中表的字段描述信息添加到注释-->
            <property name="addRemarkComments" value="true"/>
            <!--注释里不添加日期-->
            <property name="suppressDate" value="true"/>
        </commentGenerator>

        <!--数据库连接，直接通过${}读取application.properties里的配置-->
        <jdbcConnection
                driverClass="com.mysql.cj.jdbc.Driver"
                connectionURL="jdbc:mysql://localhost:3306/cm_interface?useUnicode=true"
                userId="root"
                password="kk209257"/>

        <!--类型装换-->
        <javaTypeResolver>
            <property name="forceBigDecimals" value="true"/>
        </javaTypeResolver>

        <!--生成POJO对象，并将类放到com.songguoliang.springboot.entity包下-->
        <javaModelGenerator targetPackage="cn.roy.springcloud.api.dao.model"
                            targetProject="src/main/java"/>

        <!--生成mapper xml文件，并放到resources下的mapper文件夹下-->
        <sqlMapGenerator targetPackage="mapper" targetProject="src/main/resources"/>

        <!--生成mapper xml对应接口，放到com.songguoliang.springboot.mapper包下-->
        <javaClientGenerator targetPackage="cn.roy.springcloud.api.dao.mapper"
                             targetProject="src/main/java" type="XMLMAPPER"/>

        <!--table标签可以有多个，至少一个，tableName指定表名，可以使用_和%通配符-->
        <table tableName="api" domainObjectName="ApiModel">
            <property name="mapperName" value="ApiModelMapper"/>
            <!--generatedKey用于生成生成主键的方法，
                如果设置了该元素，MBG会在生成的<insert>元素中生成一条正确的<selectKey>元素，该元素可选
                column:主键的列名；
                sqlStatement：要生成的selectKey语句，有以下可选项：
                    Cloudscape:相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()
                    DB2       :相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()
                    DB2_MF    :相当于selectKey的SQL为：SELECT IDENTITY_VAL_LOCAL() FROM SYSIBM.SYSDUMMY1
                    Derby     :相当于selectKey的SQL为：VALUES IDENTITY_VAL_LOCAL()
                    HSQLDB    :相当于selectKey的SQL为：CALL IDENTITY()
                    Informix  :相当于selectKey的SQL为：select dbinfo('sqlca.sqlerrd1') from systables where tabid=1
                    MySql     :相当于selectKey的SQL为：SELECT LAST_INSERT_ID()
                    SqlServer :相当于selectKey的SQL为：SELECT SCOPE_IDENTITY()
                    SYBASE    :相当于selectKey的SQL为：SELECT @@IDENTITY
                    JDBC      :相当于在生成的insert元素上添加useGeneratedKeys="true"和keyProperty属性-->
            <generatedKey column="id" sqlStatement="MySql" identity="true" type="post"/>
            <!--数据库中表名有时我们都会带个前缀，而实体又不想带前缀，这个配置可以把实体的前缀去掉-->
            <!--<domainObjectRenamingRule searchString="^Tbl" replaceString=""/>-->
        </table>

    </context>
</generatorConfiguration>