<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.roy.springcloud.api.dao.mapper.ApiStatisticsModelMapper">
  <resultMap id="BaseResultMap" type="cn.roy.springcloud.api.dao.model.ApiStatisticsModel">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="api_id" jdbcType="BIGINT" property="apiId" />
    <result column="cost_time" jdbcType="BIGINT" property="costTime" />
    <result column="delete" jdbcType="BIT" property="delete" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <sql id="Model_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Model_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, api_id, cost_time, delete, create_time, update_time
  </sql>
  <select id="selectByQuery" parameterType="cn.roy.springcloud.api.dao.model.ApiStatisticsModelQuery" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from api_statistics
    <if test="_parameter != null">
      <include refid="Model_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from api_statistics
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from api_statistics
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByQuery" parameterType="cn.roy.springcloud.api.dao.model.ApiStatisticsModelQuery">
    delete from api_statistics
    <if test="_parameter != null">
      <include refid="Model_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.roy.springcloud.api.dao.model.ApiStatisticsModel">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into api_statistics (api_id, cost_time, delete, 
      create_time, update_time)
    values (#{apiId,jdbcType=BIGINT}, #{costTime,jdbcType=BIGINT}, #{delete,jdbcType=BIT}, 
      #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="cn.roy.springcloud.api.dao.model.ApiStatisticsModel">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into api_statistics
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="apiId != null">
        api_id,
      </if>
      <if test="costTime != null">
        cost_time,
      </if>
      <if test="delete != null">
        delete,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="apiId != null">
        #{apiId,jdbcType=BIGINT},
      </if>
      <if test="costTime != null">
        #{costTime,jdbcType=BIGINT},
      </if>
      <if test="delete != null">
        #{delete,jdbcType=BIT},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByQuery" parameterType="cn.roy.springcloud.api.dao.model.ApiStatisticsModelQuery" resultType="java.lang.Long">
    select count(*) from api_statistics
    <if test="_parameter != null">
      <include refid="Model_Where_Clause" />
    </if>
  </select>
  <update id="updateByQuerySelective" parameterType="map">
    update api_statistics
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.apiId != null">
        api_id = #{record.apiId,jdbcType=BIGINT},
      </if>
      <if test="record.costTime != null">
        cost_time = #{record.costTime,jdbcType=BIGINT},
      </if>
      <if test="record.delete != null">
        delete = #{record.delete,jdbcType=BIT},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Model_Where_Clause" />
    </if>
  </update>
  <update id="updateByQuery" parameterType="map">
    update api_statistics
    set id = #{record.id,jdbcType=BIGINT},
      api_id = #{record.apiId,jdbcType=BIGINT},
      cost_time = #{record.costTime,jdbcType=BIGINT},
      delete = #{record.delete,jdbcType=BIT},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Model_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.roy.springcloud.api.dao.model.ApiStatisticsModel">
    update api_statistics
    <set>
      <if test="apiId != null">
        api_id = #{apiId,jdbcType=BIGINT},
      </if>
      <if test="costTime != null">
        cost_time = #{costTime,jdbcType=BIGINT},
      </if>
      <if test="delete != null">
        delete = #{delete,jdbcType=BIT},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.roy.springcloud.api.dao.model.ApiStatisticsModel">
    update api_statistics
    set api_id = #{apiId,jdbcType=BIGINT},
      cost_time = #{costTime,jdbcType=BIGINT},
      delete = #{delete,jdbcType=BIT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>